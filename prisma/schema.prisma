// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  costumes  Costume[] @relation("OwnerCostumes")
  rentals   Rental[]
  reviews   Review[]
}

model Costume {
  id          String     @id @default(uuid())
  title       String
  description String
  price       Float
  isForSale   Boolean    @default(false)
  isForRent   Boolean    @default(false)
  imageUrl    String
  categoryId  String
  ownerId     String
  createdAt   DateTime   @default(now())
  category    Category   @relation(fields: [categoryId], references: [id])
  owner       User       @relation("OwnerCostumes", fields: [ownerId], references: [id])
  rentals     Rental[]
  reviews     Review[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  costumes Costume[]
}

model Rental {
  id         String   @id @default(uuid())
  userId     String
  costumeId  String
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  status     RentalStatus @default(PENDING)
  user       User     @relation(fields: [userId], references: [id])
  costume    Costume  @relation(fields: [costumeId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  userId     String
  costumeId  String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  costume    Costume  @relation(fields: [costumeId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum RentalStatus {
  PENDING
  APPROVED
  CANCELLED
  RETURNED
}
